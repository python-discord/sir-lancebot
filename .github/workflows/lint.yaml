name: Lint

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Run linting & tests
    runs-on: ubuntu-latest
    env:
      # List of licenses that are compatible with the MIT License and
      # can be used in our project
      ALLOWED_LICENSES: Apache Software License;
        BSD;  BSD License;
        GNU Library or Lesser General Public License (LGPL);
        Historical Permission Notice and Disclaimer (HPND);
        ISC License (ISCL);
        MIT License;
        Mozilla Public License 2.0 (MPL 2.0);
        Public Domain;
        Python Software Foundation License

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Python Dependencies
        uses: HassanAbouelela/actions/setup-python@setup-python_v1.3.1
        with:
          dev: true
          python_version: "3.9"

      # Check all of our dev dependencies are compatible with the MIT license.
      # If you added a new dependencies that is being rejected,
      # please make sure it is compatible with the license for this project,
      # and add it to the ALLOWED_LICENSE variable
      - name: Check Dependencies License
        run: |
          pip-licenses --allow-only="$ALLOWED_LICENSE" \
            --package $(poetry export -f requirements.txt --without-hashes | sed "s/==.*//g" | tr "\n" " ")

      # Attempt to run the bot. Setting `IN_CI` to true, so bot.run() is never called.
      # This is to catch import and cog setup errors that may appear in PRs, to avoid crash loops if merged.
      - name: Attempt bot setup
        run: "python -m bot"
        env:
          USE_FAKEREDIS: true
          IN_CI: true


      # We will not run `flake8` here, as we will use a separate flake8
      # action.
      - name: Run pre-commit hooks
        run: SKIP=flake8 pre-commit run --all-files

      # Run flake8 and have it format the linting errors in the format of
      # the GitHub Workflow command to register error annotations. This
      # means that our flake8 output is automatically added as an error
      # annotation to both the run result and in the "Files" tab of a
      # pull request.
      #
      # Format used:
      # ::error file={filename},line={line},col={col}::{message}
      - name: Run flake8
        run: "flake8 \
        --format='::error file=%(path)s,line=%(row)d,col=%(col)d::[flake8] %(code)s: %(text)s'"

      # Prepare the Pull Request Payload artifact. If this fails, we
      # we fail silently using the `continue-on-error` option. It's
      # nice if this succeeds, but if it fails for any reason, it
      # does not mean that our lint checks failed.
      - name: Prepare Pull Request Payload artifact
        id: prepare-artifact
        if: always() && github.event_name == 'pull_request'
        continue-on-error: true
        run: cat $GITHUB_EVENT_PATH | jq '.pull_request' > pull_request_payload.json

      # This only makes sense if the previous step succeeded. To
      # get the original outcome of the previous step before the
      # `continue-on-error` conclusion is applied, we use the
      # `.outcome` value. This step also fails silently.
      - name: Upload a Build Artifact
        if: always() && steps.prepare-artifact.outcome == 'success'
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: pull-request-payload
          path: pull_request_payload.json
